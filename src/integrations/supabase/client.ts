
import { createClient } from '@supabase/supabase-js'
import type { Database } from './types'
import { APP_CONFIG } from '@/lib/constants'

// Configuraci√≥n del cliente Supabase optimizada para m√≥vil
export const supabase = createClient<Database>(
  APP_CONFIG.supabase.url,
  APP_CONFIG.supabase.anonKey,
  {
    auth: {
      storage: typeof window !== 'undefined' ? localStorage : undefined,
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      flowType: 'pkce',
      // Configuraci√≥n espec√≠fica para m√≥vil mejorada
      storageKey: 'transporegistros-auth-token',
      debug: import.meta.env.DEV
    },
    global: {
      headers: {
        'x-application-name': APP_CONFIG.name,
        'x-application-version': APP_CONFIG.version
      }
    },
    db: {
      schema: 'public'
    },
    // Configuraci√≥n adicional para estabilidad
    realtime: {
      params: {
        eventsPerSecond: 2
      }
    }
  }
)

// Configurar manejo de errores globales mejorado para m√≥vil
supabase.auth.onAuthStateChange((event, session) => {
  if (import.meta.env.DEV) {
    console.log('üîÑ Auth state change:', event, session?.user?.email || 'No user');
  }
  
  if (event === 'SIGNED_OUT') {
    // Limpiar datos locales al cerrar sesi√≥n de forma m√°s agresiva
    try {
      localStorage.removeItem('supabase.auth.token')
      localStorage.removeItem('transporegistros-auth-token')
      // En m√≥vil, ser m√°s selectivo con la limpieza
      const keysToRemove = [];
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key && (key.includes('supabase') || key.includes('auth'))) {
          keysToRemove.push(key);
        }
      }
      keysToRemove.forEach(key => localStorage.removeItem(key));
      
      if (import.meta.env.DEV) {
        console.log('üßπ Local storage cleared successfully');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Error clearing localStorage:', error)
    }
  }
  
  if (event === 'TOKEN_REFRESHED' && import.meta.env.DEV) {
    console.log('üîÑ Token de autenticaci√≥n renovado')
  }
  
  if (event === 'SIGNED_IN' && import.meta.env.DEV) {
    console.log('‚úÖ Usuario autenticado:', session?.user?.email)
  }
})

// Verificar conexi√≥n con Supabase solo en desarrollo
const healthCheck = async () => {
  if (!import.meta.env.DEV) return;
  
  try {
    const { data, error } = await supabase.from('vehicles').select('count').limit(1)
    if (error) {
      console.warn('‚ö†Ô∏è Problema de conexi√≥n con Supabase:', error.message)
    } else {
      console.log('‚úÖ Conexi√≥n con Supabase establecida correctamente')
    }
  } catch (error) {
    console.error('‚ùå Error de conexi√≥n con Supabase:', error)
  }
}

// Ejecutar verificaci√≥n solo en desarrollo
if (import.meta.env.DEV) {
  healthCheck()
}

export default supabase
