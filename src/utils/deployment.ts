
/**
 * Utilidades para despliegue y configuraci√≥n de producci√≥n de TransporegistrosPlus
 * 
 * Este m√≥dulo maneja toda la l√≥gica relacionada con el deployment:
 * - Detecci√≥n de entorno (desarrollo/producci√≥n/GitHub Pages)
 * - Configuraci√≥n de URLs y paths seg√∫n entorno
 * - Gesti√≥n de t√≠tulos de p√°gina din√°micos
 * - Configuraci√≥n de Service Workers (PWA futuro)
 * - Inicializaci√≥n de analytics y monitoreo
 * - Manejo global de errores en producci√≥n
 * 
 * Caracter√≠sticas especiales:
 * - Soporte nativo para GitHub Pages
 * - Configuraci√≥n autom√°tica de basename para React Router
 * - Logging inteligente seg√∫n entorno
 * - Preparado para futuras funcionalidades PWA
 * 
 * @author TransporegistrosPlus Team
 * @version 1.0.0
 */

import { APP_CONFIG } from '@/lib/constants'

/**
 * Verifica si la aplicaci√≥n est√° ejecut√°ndose en producci√≥n
 * Utiliza variables de entorno de Vite para determinaci√≥n
 * 
 * @returns {boolean} true si est√° en producci√≥n, false en desarrollo
 */
export const isProduction = (): boolean => {
  return import.meta.env.PROD
}

/**
 * Verifica si estamos ejecut√°ndose en GitHub Pages
 * √ötil para configuraciones espec√≠ficas de GitHub Pages
 * 
 * @returns {boolean} true si el hostname contiene 'github.io'
 */
export const isGitHubPages = (): boolean => {
  return window.location.hostname.includes('github.io')
}

/**
 * Obtiene la URL base de la aplicaci√≥n seg√∫n el entorno
 * Configuraci√≥n autom√°tica para diferentes tipos de deployment
 * 
 * @returns {string} URL base completa de la aplicaci√≥n
 * 
 * @example
 * // En GitHub Pages: 'https://omaryesidvargas.github.io/transporegistrosplus'
 * // En desarrollo: 'http://localhost:8080'
 */
export const getBaseUrl = (): string => {
  if (isGitHubPages()) {
    return 'https://omaryesidvargas.github.io/transporegistrosplus'
  }
  return APP_CONFIG.urls.current
}

/**
 * Obtiene el basename para React Router seg√∫n el entorno
 * GitHub Pages requiere basename con nombre del repositorio
 * 
 * @returns {string} Basename para BrowserRouter
 * 
 * @example
 * // En desarrollo: ""
 * // En GitHub Pages: "/transporegistrosplus"
 * // En otros deployments de producci√≥n: ""
 */
export const getRouterBasename = (): string => {
  if (import.meta.env.DEV) {
    return ""
  }
  
  if (isGitHubPages()) {
    return "/transporegistrosplus"
  }
  
  return ""
}

/**
 * Configura el t√≠tulo de la p√°gina seg√∫n el entorno
 * A√±ade indicadores de entorno para facilitar desarrollo
 * 
 * @param {string} [title] - T√≠tulo espec√≠fico de la p√°gina (opcional)
 * 
 * @example
 * setPageTitle() // "TransporegistrosPlus"
 * setPageTitle("Dashboard") // "Dashboard - TransporegistrosPlus"
 * setPageTitle("Dashboard") // "Dashboard - TransporegistrosPlus (Dev)" en desarrollo
 */
export const setPageTitle = (title?: string): void => {
  const appName = APP_CONFIG.name
  const environment = isProduction() ? '' : ' (Dev)'
  document.title = title ? `${title} - ${appName}${environment}` : `${appName}${environment}`
}

/**
 * Configuraci√≥n de Service Worker para PWA (preparado para futuro)
 * Registra SW solo en producci√≥n para evitar problemas en desarrollo
 * 
 * @returns {Promise<void>} Promise que se resuelve cuando el SW est√° registrado
 * 
 * @example
 * await registerServiceWorker()
 * console.log('PWA configurada')
 */
export const registerServiceWorker = async (): Promise<void> => {
  if ('serviceWorker' in navigator && isProduction()) {
    try {
      const swUrl = isGitHubPages() 
        ? '/transporegistrosplus/sw.js' 
        : '/sw.js'
      await navigator.serviceWorker.register(swUrl)
      console.log('‚úÖ Service Worker registrado correctamente')
    } catch (error) {
      console.warn('‚ö†Ô∏è Error al registrar Service Worker:', error)
    }
  }
}

/**
 * Configura analytics y m√©tricas (placeholder para futuro)
 * Punto de integraci√≥n para Google Analytics, Mixpanel, etc.
 * Solo se ejecuta en producci√≥n para evitar datos de desarrollo
 */
export const initializeAnalytics = (): void => {
  if (isProduction()) {
    // Aqu√≠ se puede integrar Google Analytics, Mixpanel, etc.
    console.log('üìä Analytics inicializado para producci√≥n')
  }
}

/**
 * Manejo de errores global para producci√≥n
 * Captura errores no manejados y promise rejections
 * Preparado para integraci√≥n con servicios de monitoreo
 */
export const setupErrorHandling = (): void => {
  if (isProduction()) {
    /**
     * Captura errores JavaScript globales
     * √ötil para detectar bugs en producci√≥n
     */
    window.addEventListener('error', (event) => {
      console.error('‚ùå Error global capturado:', event.error)
      // Aqu√≠ se puede enviar a un servicio de monitoreo como Sentry
    })
    
    /**
     * Captura promises rechazadas no manejadas
     * Previene silent failures en c√≥digo as√≠ncrono
     */
    window.addEventListener('unhandledrejection', (event) => {
      console.error('‚ùå Promise rechazada no manejada:', event.reason)
      // Aqu√≠ se puede enviar a un servicio de monitoreo
    })
  }
}

/**
 * Configuraci√≥n inicial para el despliegue
 * Funci√≥n principal que inicializa todas las configuraciones necesarias
 * Debe llamarse al inicio de la aplicaci√≥n
 * 
 * Inicializa:
 * - T√≠tulo de p√°gina
 * - Manejo de errores globales
 * - Analytics (si est√° configurado)
 * - Logs de informaci√≥n del entorno
 * - Optimizaciones para producci√≥n
 * 
 * @example
 * // En App.tsx o main.tsx
 * useEffect(() => {
 *   initializeApp()
 * }, [])
 */
export const initializeApp = (): void => {
  setPageTitle()
  setupErrorHandling()
  initializeAnalytics()
  
  // Logs de informaci√≥n √∫til para debugging
  console.log(`üöÄ ${APP_CONFIG.name} v${APP_CONFIG.version} iniciado`)
  console.log('üåç Entorno:', isProduction() ? 'PRODUCCI√ìN' : 'DESARROLLO')
  console.log('üìç URL Base:', getBaseUrl())
  console.log('üîó Router Basename:', getRouterBasename())
  console.log('üì± GitHub Pages:', isGitHubPages())
  
  /**
   * Optimizaci√≥n para producci√≥n: Desactivar logs de desarrollo
   * Solo en producci√≥n que no sea GitHub Pages (para mantener debugging en GH Pages)
   */
  if (isProduction() && !isGitHubPages()) {
    // Desactivar logs de desarrollo solo en producci√≥n que no sea GitHub Pages
    console.log = () => {}
    console.warn = () => {}
  }
}
