
/**
 * Utilidades para el despliegue y configuraci√≥n de producci√≥n
 */

import { APP_CONFIG } from '@/lib/constants'

/**
 * Verifica si la aplicaci√≥n est√° ejecut√°ndose en producci√≥n
 */
export const isProduction = (): boolean => {
  return import.meta.env.PROD
}

/**
 * Verifica si estamos en GitHub Pages
 */
export const isGitHubPages = (): boolean => {
  return window.location.hostname.includes('github.io')
}

/**
 * Obtiene la URL base de la aplicaci√≥n seg√∫n el entorno
 */
export const getBaseUrl = (): string => {
  if (isGitHubPages()) {
    return 'https://omaryesidvargas.github.io/transporegistrosplus'
  }
  return APP_CONFIG.urls.current
}

/**
 * Obtiene el basename para React Router
 */
export const getRouterBasename = (): string => {
  if (import.meta.env.DEV) {
    return ""
  }
  
  if (isGitHubPages()) {
    return "/transporegistrosplus"
  }
  
  return ""
}

/**
 * Configura el t√≠tulo de la p√°gina seg√∫n el entorno
 */
export const setPageTitle = (title?: string): void => {
  const appName = APP_CONFIG.name
  const environment = isProduction() ? '' : ' (Dev)'
  document.title = title ? `${title} - ${appName}${environment}` : `${appName}${environment}`
}

/**
 * Configuraci√≥n de Service Worker para PWA (futuro)
 */
export const registerServiceWorker = async (): Promise<void> => {
  if ('serviceWorker' in navigator && isProduction()) {
    try {
      const swUrl = isGitHubPages() 
        ? '/transporegistrosplus/sw.js' 
        : '/sw.js'
      await navigator.serviceWorker.register(swUrl)
      console.log('‚úÖ Service Worker registrado correctamente')
    } catch (error) {
      console.warn('‚ö†Ô∏è Error al registrar Service Worker:', error)
    }
  }
}

/**
 * Configura analytics y m√©tricas (placeholder para futuro)
 */
export const initializeAnalytics = (): void => {
  if (isProduction()) {
    // Aqu√≠ se puede integrar Google Analytics, Mixpanel, etc.
    console.log('üìä Analytics inicializado para producci√≥n')
  }
}

/**
 * Manejo de errores global para producci√≥n
 */
export const setupErrorHandling = (): void => {
  if (isProduction()) {
    window.addEventListener('error', (event) => {
      console.error('‚ùå Error global capturado:', event.error)
      // Aqu√≠ se puede enviar a un servicio de monitoreo como Sentry
    })
    
    window.addEventListener('unhandledrejection', (event) => {
      console.error('‚ùå Promise rechazada no manejada:', event.reason)
      // Aqu√≠ se puede enviar a un servicio de monitoreo
    })
  }
}

/**
 * Configuraci√≥n inicial para el despliegue
 */
export const initializeApp = (): void => {
  setPageTitle()
  setupErrorHandling()
  initializeAnalytics()
  
  // Logs de informaci√≥n √∫til para debugging
  console.log(`üöÄ ${APP_CONFIG.name} v${APP_CONFIG.version} iniciado`)
  console.log('üåç Entorno:', isProduction() ? 'PRODUCCI√ìN' : 'DESARROLLO')
  console.log('üìç URL Base:', getBaseUrl())
  console.log('üîó Router Basename:', getRouterBasename())
  console.log('üì± GitHub Pages:', isGitHubPages())
  
  if (isProduction() && !isGitHubPages()) {
    // Desactivar logs de desarrollo solo en producci√≥n que no sea GitHub Pages
    console.log = () => {}
    console.warn = () => {}
  }
}
